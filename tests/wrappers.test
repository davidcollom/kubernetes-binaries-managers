#!/usr/bin/env bash

load "lib/create-kind-cluster/load"

load "lib/bats-support/load"
load "lib/bats-assert/load"

function setup() {
  if [[ ! -e ./bin/kbenv  ]]
  then
    make build
  elif [[ ! -e ./bin/kubectl-wrapper ]]
  then
    make build
  elif [[ ! -e ./bin/ocenv ]]
  then
    make build
  elif [[ ! -e ./bin/oc-wrapper ]]
  then
    make build
  fi
  export PATH=$PATH:/home/$(whoami)/.bin/
  export PATH=$PATH:$(pwd)/bin/
}

@test "kubectl apply" {
  if [[ "$KIND_CREATE_CLUSTER" == "true" ]]
  then
    teardownCallback=$(create_cluster)
  fi

  run ./bin/kbenv install 1.18.1
  assert_success
  run ./bin/kubectl-wrapper create deployment hello-node-kubectl --image=k8s.gcr.io/echoserver:1.4
  assert_success

  pod=$(./bin/kubectl-wrapper get pod -l app=hello-node-kubectl -o=custom-columns=:.metadata.name | tail -n1)
  run ./bin/kubectl-wrapper rollout status deploy hello-node-kubectl -w
  assert_success
  run ./bin/kubectl-wrapper exec "$pod" -- ls
  assert_success
  refute_output --partial "Unable to use a TTY"

  run ./bin/kubectl-wrapper delete deployment hello-node-kubectl --wait=true
  assert_success

  run ./bin/kbenv uninstall 1.18.1
  assert_success

  if [[ "$KIND_CREATE_CLUSTER" == "true" ]]
  then
    eval "$teardownCallback"
  fi
}

@test "oc apply" {
  if [[ "$KIND_CREATE_CLUSTER" == "true" ]]
  then
    teardownCallback=$(create_cluster)
  fi

  run ./bin/ocenv install 4.15.0-0.okd-2024-03-10-010116
  assert_success
  run ./bin/oc-wrapper create deployment hello-node-oc --image=k8s.gcr.io/echoserver:1.4
  assert_success

  pod=$(./bin/oc-wrapper get pod -l app=hello-node-oc -o=custom-columns=:.metadata.name | tail -n1)
  run ./bin/oc-wrapper rollout status deploy hello-node-oc -w
  assert_success
  run ./bin/oc-wrapper exec "$pod" -- ls
  assert_success
  refute_output --partial "Unable to use a TTY"

  run ./bin/oc-wrapper delete deployment hello-node-oc --wait=true
  assert_success

  run ./bin/ocenv uninstall 1.18.1
  assert_success

  if [[ "$KIND_CREATE_CLUSTER" == "true" ]]
  then
    eval "$teardownCallback"
  fi
}


@test "kubectl auto" {
  if [[ "$KIND_CREATE_CLUSTER" == "true" ]]
  then
    teardownCallback=$(create_cluster)
  fi

  run ./bin/kbenv use auto
  assert_success
  assert_output --partial "Done! Using auto version."

  run ./bin/kubectl-wrapper get pod --all-namespaces
  assert_success
  assert_output --partial "coredns"

  if [[ "$KIND_CREATE_CLUSTER" == "true" ]]
  then
    eval "$teardownCallback"
  fi
}
